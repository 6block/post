name: CI

on:
  pull_request:
  push:
    branches:
      - develop
    tags:
      - 'v*'

jobs:
  quicktests:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: set up go
        uses: actions/setup-go@v4
        with:
          check-latest: true
          go-version-file: "go.mod"
      - name: fmt, tidy, generate
        run: |
          make install
          make test-fmt
          make test-tidy
          make test-generate
      - name: staticcheck
        run: make staticcheck

  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: set up go
        uses: actions/setup-go@v4
        with:
          check-latest: true
          go-version-file: "go.mod"
      - name: setup env
        run: make install
      - name: lint
        run: make lint-github-action

  unittests:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    needs:
      - quicktests
      - lint
    strategy:
      fail-fast: false
      matrix:
        os: 
          - ubuntu-latest
          - [self-hosted, linux, arm64]
          - macos-latest
          - [self-hosted, macos, arm64]
          - windows-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: set up go
        uses: actions/setup-go@v4
        with:
          check-latest: true
          go-version-file: "go.mod"
      - name: setup env
        run: make install
      - name: Add OpenCL support - Ubuntu
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: sudo apt-get update -q && sudo apt-get install -qy ocl-icd-opencl-dev libpocl2
      - name: Override SDKROOT for macOS
        if: ${{ contains(matrix.os, 'macos') && runner.arch == 'arm64' }}
        run: echo "SDKROOT=/Library/Developer/CommandLineTools/SDKs/MacOSX12.3.sdk" >> $GITHUB_ENV
      - name: Add OpenCL support - Windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: choco install opencl-intel-cpu-runtime
      - name: Clear test cache
        run: make clear-test-cache
      - name: unit tests
        env:
          GOTESTSUM_FORMAT: standard-verbose
          GOTESTSUM_JUNITFILE: unit-tests.xml
        run: make test
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        # always run even if the previous step fails
        if: always()
        with:
          report_paths: "**/unit-tests.xml"
          annotate_only: true

  build:
    name: Build postcli
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    needs:
      - unittests
    strategy:
      fail-fast: false
      matrix:
        include:
        - os: ubuntu-latest
          artifact-name: linux
        - os: [self-hosted, linux, arm64]
          artifact-name: linux-arm64
        - os: macos-latest
          artifact-name: macos
        - os: [self-hosted, macos, arm64]
          artifact-name: macos-m1
        - os: windows-latest
          artifact-name: windows
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: set up go
        uses: actions/setup-go@v4
        with:
          check-latest: true
          go-version-file: "go.mod"
      - name: setup env
        run: make install
      - name: Add OpenCL support - Ubuntu
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: sudo apt-get update -q && sudo apt-get install -qy ocl-icd-opencl-dev libpocl2
      - name: Override SDKROOT for macOS
        if: ${{ contains(matrix.os, 'macos') && runner.arch == 'arm64' }}
        run: echo "SDKROOT=/Library/Developer/CommandLineTools/SDKs/MacOSX12.3.sdk" >> $GITHUB_ENV
      - name: Add OpenCL support - Windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: choco install opencl-intel-cpu-runtime
      - name: build postcli
        run: make build

      - name: Version suffix
        id: version
        run: echo "suffix=${{ github.ref_type == 'tag' && '-' || ''}}${{ github.ref_type == 'tag' && github.ref || ''}}" >> $GITHUB_OUTPUT
      - name: Archive postcli artifacts
        uses: actions/upload-artifact@v3
        with:
          name: postcli-${{ matrix.artifact-name }}${{ steps.version.output.suffix }}
          path: |
            build/postcli${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          if-no-files-found: error

  release:
    name: Publish release
    if: github.event_name == 'push' && github.ref_type == 'tag'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts
      - name: Pack artifacts
        run: >
          mkdir ./assets;
          for dir in ./artifacts/*/; do
            zip -o -j -r "./assets/$(basename "$dir")-$TAG.zip" "$dir";
          done
        env:
          TAG: ${{ github.ref_name }}
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./assets/*.zip
          prerelease: false
          draft: true
