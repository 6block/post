// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spacemeshos/post/internal/postrs (interfaces: Scrypter)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	postrs "github.com/spacemeshos/post/internal/postrs"
)

// MockScrypter is a mock of Scrypter interface.
type MockScrypter struct {
	ctrl     *gomock.Controller
	recorder *MockScrypterMockRecorder
}

// MockScrypterMockRecorder is the mock recorder for MockScrypter.
type MockScrypterMockRecorder struct {
	mock *MockScrypter
}

// NewMockScrypter creates a new mock instance.
func NewMockScrypter(ctrl *gomock.Controller) *MockScrypter {
	mock := &MockScrypter{ctrl: ctrl}
	mock.recorder = &MockScrypterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScrypter) EXPECT() *MockScrypterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockScrypter) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockScrypterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockScrypter)(nil).Close))
}

// Positions mocks base method.
func (m *MockScrypter) Positions(arg0, arg1 uint64) (postrs.ScryptPositionsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Positions", arg0, arg1)
	ret0, _ := ret[0].(postrs.ScryptPositionsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Positions indicates an expected call of Positions.
func (mr *MockScrypterMockRecorder) Positions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Positions", reflect.TypeOf((*MockScrypter)(nil).Positions), arg0, arg1)
}
