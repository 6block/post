// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spacemeshos/post/internal/postrs (interfaces: Scrypter)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/api.go . Scrypter
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	postrs "github.com/spacemeshos/post/internal/postrs"
	gomock "go.uber.org/mock/gomock"
)

// MockScrypter is a mock of Scrypter interface.
type MockScrypter struct {
	ctrl     *gomock.Controller
	recorder *MockScrypterMockRecorder
}

// MockScrypterMockRecorder is the mock recorder for MockScrypter.
type MockScrypterMockRecorder struct {
	mock *MockScrypter
}

// NewMockScrypter creates a new mock instance.
func NewMockScrypter(ctrl *gomock.Controller) *MockScrypter {
	mock := &MockScrypter{ctrl: ctrl}
	mock.recorder = &MockScrypterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScrypter) EXPECT() *MockScrypterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockScrypter) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockScrypterMockRecorder) Close() *MockScrypterCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockScrypter)(nil).Close))
	return &MockScrypterCloseCall{Call: call}
}

// MockScrypterCloseCall wrap *gomock.Call
type MockScrypterCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockScrypterCloseCall) Return(arg0 error) *MockScrypterCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockScrypterCloseCall) Do(f func() error) *MockScrypterCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockScrypterCloseCall) DoAndReturn(f func() error) *MockScrypterCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Positions mocks base method.
func (m *MockScrypter) Positions(arg0, arg1 uint64) (postrs.ScryptPositionsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Positions", arg0, arg1)
	ret0, _ := ret[0].(postrs.ScryptPositionsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Positions indicates an expected call of Positions.
func (mr *MockScrypterMockRecorder) Positions(arg0, arg1 any) *MockScrypterPositionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Positions", reflect.TypeOf((*MockScrypter)(nil).Positions), arg0, arg1)
	return &MockScrypterPositionsCall{Call: call}
}

// MockScrypterPositionsCall wrap *gomock.Call
type MockScrypterPositionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockScrypterPositionsCall) Return(arg0 postrs.ScryptPositionsResult, arg1 error) *MockScrypterPositionsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockScrypterPositionsCall) Do(f func(uint64, uint64) (postrs.ScryptPositionsResult, error)) *MockScrypterPositionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockScrypterPositionsCall) DoAndReturn(f func(uint64, uint64) (postrs.ScryptPositionsResult, error)) *MockScrypterPositionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
